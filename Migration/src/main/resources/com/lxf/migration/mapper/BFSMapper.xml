<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxf.migration.mapper.BFSMapper">

    <resultMap id="selectDbaObjectsMap" type="com.lxf.migration.pojo.DbaObjects">
        <result column="owner" property="owner"/>
        <result column="object_name" property="objectName"/>
        <result column="object_type" property="objectType"/>
        <result column="object_id" property="objectID"/>
        <result column="last_ddl_time" property="lastDDLTime"/>
    </resultMap>

    <resultMap id="selecteAllDependenciesMap" type="com.lxf.migration.pojo.DbaObjects">
        <result column="referenced_owner" property="owner"/>
        <result column="referenced_name" property="objectName"/>
        <result column="referenced_type" property="objectType"/>
    </resultMap>


    <resultMap id="selectPackageMap" type="com.lxf.migration.pojo.Package">
        <result column="owner" property="owner"/>
        <result column="name" property="name"/>
        <result column="type" property="type"/>
        <result column="line" property="line"/>
        <result column="text" property="text"/>
    </resultMap>

    <select id="selectDbaObjects" resultMap="selectDbaObjectsMap">
        select d.owner,
               d.object_name,
               d.object_type,
               d.object_id,
               d.last_ddl_time
        from dba_objects d
        where d.owner = #{owner}
         and d.object_name=#{objectName}
         and  d.object_type=#{objectType}
    </select>

    <select id="selecteDirectDependencies" resultMap="selecteAllDependenciesMap">


        select d.referenced_name,
               d.referenced_owner,
               case d.referenced_type when 'PACKAGE BODY' then 'PACKAGE' else referenced_type end referenced_type
        from dba_dependencies d
        where d.name = #{objectName}
          and d.owner = #{owner}
          and d.type = (case #{objectType} when 'PACKAGE' then 'PACKAGE BODY' else #{objectType} end)
          and d.referenced_owner not in ('SYS', 'PUBLIC')
          and not (d.referenced_name = d.name
            and d.owner = d.referenced_owner
            and d.type = (case d.referenced_type when 'PACKAGE' then 'PACKAGE BODY' else referenced_type end)
            )
          and d.referenced_link_name is null
    </select>

    <select id="selectIndexes" resultType="com.lxf.migration.pojo.DbaObjects">

        select d.owner "owner", d.index_name "objectName", 'INDEX' "objectType"
        from dba_indexes d
        where 1 = 1
          AND D.TABLE_NAME = #{objectName}
          AND D.TABLE_OWNER = #{owner}
          AND D.TABLE_TYPE = #{objectType}


    </select>


    <select id="selectPackage" resultMap="selectPackageMap">
        SELECT d.owner, d.name, d.type, d.line, d.text
        FROM dba_source D
        WHERE D.NAME = #{objectName}
          AND D.OWNER = #{owner}
          AND D.TYPE = 'PACKAGE'
        ORDER BY LINE
    </select>
    <select id="selectPackageBody" resultMap="selectPackageMap">
        SELECT d.owner, d.name, d.type, d.line, d.text
        FROM dba_source D
        WHERE D.NAME = #{objectName}
          AND D.OWNER = #{owner}
          AND D.TYPE = 'PACKAGE BODY'
        ORDER BY LINE
    </select>
    <select id="selectSynonym" resultType="com.lxf.migration.pojo.DbaObjects">
        select d.owner        "owner",
               d.synonym_name "objectName",
               'SYNONYM'      "objectType"
        from dba_synonyms d
        where 1 = 1
          AND D.TABLE_OWNER = #{owner}
          AND D.TABLE_name = #{objectName}


    </select>
    <select id="selectDBlink" resultType="com.lxf.migration.pojo.DbaObjects">

        select do.owner "owner", do.object_type "objectType", do.object_name "objectName"
        from dba_dependencies d,
             dba_objects do
        where d.name = #{objectName}
          and d.owner = #{owner}
          and do.object_type = 'DATABASE LINK'
          and d.referenced_link_name is not null
          and do.object_name = d.referenced_link_name
        group by do.owner, do.object_type, do.object_name

    </select>
    <select id="selectTrigger" resultType="com.lxf.migration.pojo.DbaObjects">

        select D.OWNER "owner", D.TRIGGER_NAME "objectName", 'TRIGGER' "objectType"
        from dba_triggers d
        where d.table_name = #{objectName}
          AND D.TABLE_OWNER = #{owner}
          AND D.BASE_OBJECT_TYPE = 'TABLE'


    </select>

    <select id="callSetIdentifier" statementType="CALLABLE">
        {call DBMS_SESSION.set_identifier(#{clientID, jdbcType=VARCHAR, mode=IN})}
    </select>
    <select id="callGetDDL" statementType="CALLABLE" resultType="java.util.Map">
        { #{sourceCode, mode=OUT, jdbcType=CLOB} = call DBMS_METADATA.GET_DDL(#{objectType, jdbcType=VARCHAR,mode=IN},
                                                                              #{objectName, jdbcType=VARCHAR,mode=IN},
                                                                              #{owner, jdbcType=VARCHAR,mode=IN}
            )
            }
    </select>
    <select id="callGetHashCode" statementType="CALLABLE" resultType="java.util.Map">
        { #{sourceCodeHash, mode=OUT, jdbcType=VARCHAR} = call DBMS_CRYPTO.HASH(
                DBMS_METADATA.GET_DDL(#{objectType, jdbcType=VARCHAR,mode=IN},
                                      #{objectName, jdbcType=VARCHAR,mode=IN},
                                      #{owner, jdbcType=VARCHAR,mode=IN}
                    ), 2)
            }
    </select>
    <select id="selectDataBase" resultType="java.lang.String">
      select name from v$database
    </select>
    <select id="selectDbaTabPrivs" resultType="java.lang.Integer">
        select count(1)
        from dba_tab_privs d
        where 1 = 1
          and d.privilege = 'EXECUTE'
          and d.type = 'PACKAGE'
          and d.GRANTEE = #{grantee}
          and d.table_name =#{packageName}

    </select>

    <select id="selectDbaSysPrivs" resultType="java.lang.Integer">
        select count(1)
        from DBA_SYS_PRIVS p
        where p.privilege = #{privilege}
          and p.GRANTEE = #{grantee}


    </select>
    <select id="selectDbaRolePrivs" resultType="java.lang.Integer">
        SELECT count(1)
        FROM DBA_ROLE_PRIVS D
        WHERE D.GRANTED_ROLE =  #{privilege}
          AND D.GRANTEE = #{grantee}
    </select>


    <select id="checkConnectStatus" resultType="java.lang.Integer">
        select 1 from dual
    </select>

</mapper>
